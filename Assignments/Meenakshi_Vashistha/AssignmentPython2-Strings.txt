1. Guess output of each slice: 
 s=‘Python is Object Oriented’ 
    1. s[-1] 2. s[::-1] 3. s[:-1] 4. s[1:1] 5. s[4:10]
Sol-1) d
    2) detneirO tcejbO si nohtyP
    3) Python is Object Oriente
    4) ''
    5) on is 
   
2. What error do you see for following statements: 
 s= '' 
 print(s[1])
Sol-  1 s= ''
----> 2 print(s[1])

IndexError: string index out of range   # it indicates that string is empty and we are calling it's 2nd value which is out of range.


3. Do you get any error for the following code, if not give the output: 
 S='Gaurav' 
 print(s[1]) 
Sol- Yes, it is showing error as follows:

  IndexError                                Traceback (most recent call last)
<ipython-input-17-6a65b3b4a0d8> in <module>
      1 S='Gaurav'
----> 2 print(s[1])

IndexError: string index out of range     # as there is a difference in beyween 'S' and's'

4. Find output of the following: 
a) s=‘a b cd’ 
print(len(s)) 
print(s[::2]) 
print(len(s[::2]))

Sol-a) 6
       abc
       3
       
b) s=‘a#b#c#d#’ 
print(s.split()) 
print(s.split(‘#’)) 
l=s.split(‘#’) 
s=‘$’.join(l) 
print(s)

Sol-b) ['a#b#c#d#']
       ['a', 'b', 'c', 'd']
       a$b$c$d
       
c) S='Gaurav'
S=S[::-2][::-2] 
print(S) 

Sol- S=vra[::-2]= av

d) print(1>2) 
Sol- False

e) print(4%2, 5%2, 2%5, sep=',') 
Sol- 0,1,2

f) s='abcba' 
s.upper() 
print(s) 
print(s.count('A'), end = ' ,') 
print(s.count('A', 2,4) , end = ' ,') 
print(s.count('a', 2,4) , end = ' ,')     

Sol- abcba
     0 ,0 ,0 ,
     
5. WAP to input a string and remove all spaces from it.

Sol- s=input("enter a string:")
     print(s.replace(' ', ''))
     
6. What does this symbol denote: 
[]   
Sol- This symbol[], is a symbol of list. List can be created by placing the sequence(many data types int, float, string) inside the square bracket. List is mutable, can be modified.

7. WAP to print all methods(functions/operations) available in a string (Hint : dir())

Sol- dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

8. Write statement to check if rstrip method is available in the str class. 
(Hint : Use the find function or in)

Sol- (i) x=str(dir(str))
         print(type(x))
         if(x.find("rstrip")):
          print("yes, rstrip is present")
         else:    
          print("no, rstrip is not present")
          
          or
          
      (ii)(a)To take input from user
            
            x=input("enter string object/method/function:")
            if x in dir(str()) :
               print("present")
            else:
               print("not present")    
               
          (b)To check whether rstrip method is available in the str class
          
             if 'rstrip' in dir(str()) :
               print("present")
             else:
               print("not present")
               
          (c) print("rstrip" in dir(str()))
              o/p-True
    
9. WAP to store the following patterns in a string variable and then print them:
Sol- print(''' 
               * * * * *
                   *
                   *
                   *
                   *''')

     print('''
                 *       *
                 * *   * *
                 *   *   *
                 *       *
                 ''')
                 
                 
      
      print('''
         ________
          |      |
          o      |
        / | \    |
         / \     |
       __________|  
         ''')
10. WAP to input a string and replace all space with new lines (\n) and print again.

sol- 
    x=input("enter a string:")
    y=x.replace(' ','\n')
    print(y)
     
11. WAP to input complete name(first and last name separated by space) and print first and last 
name separately along with their length in upper case.
Sol-
x=input("enter a string:").upper()
y=x.split()
print(y[0],len(y[0]),y[1],len(y[1]),sep=' ')

12. WAP to input a string and split it into 2 halves. The string can be of any length 
Ex-1: Input = “String” 
S1 = Str 
 S2 = ing 
Ex-2: Input = “words” 
S1 = wo 
S2 = ds

Sol- 
i=input("enter String:")
y=len(i)
#print(y)
z=y//2
#print(z)
print(i[:z])
print(i[z if len(i)%2==0 else z+1:])
    



